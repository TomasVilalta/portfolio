---
const { style } = Astro.props;
---

<div class="main" style={style}>
  <div class="container">
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </div>
</div>

<style>
  .main {
    display: flex;
    --s: 200px; /* size  */
    --m: 6px; /* margin */
    --f: calc(1.732 * var(--s) + 4 * var(--m) - 1px);
    justify-content: flex-end;
  }

  .container {
    font-size: 0; /*disable white space between inline block element */
    max-width: 850px;
  }

  .container div:hover {
    transform: scale(1.03);
    transition: all 0.1s ease-in-out;
  }

  .container div:nth-child(1),
  .container div:nth-child(2),
  .container div:nth-child(8) {
    animation: none;
    background: transparent;
  }

  .container div {
    animation: glow 0.5s ease-in;
    width: var(--s);
    margin: var(--m);
    height: calc(var(--s) * 1.1547);
    display: inline-block;
    font-size: initial;
    clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
    background: rgb(33, 33, 33);
    margin-bottom: calc(var(--m) - var(--s) * 0.2885);
    transition: all 1s ease-in-out;
    position: relative;
  }

  .container::before {
    content: "";
    width: calc(var(--s) / 2 + var(--m));
    float: left;

    height: 120%;

    shape-outside: repeating-linear-gradient(#0000 0 calc(var(--f) - 3px), #000 0 var(--f));
  }
  /* .container div::before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(800px circle at 100px 100px, rgb(134, 134, 134), transparent 40%);
    transition: background 0.3s ease-in-out;
    z-index: 30;
  } */

  @keyframes glow {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.03);
    }
    100% {
      transform: initial;
    }
  }

  .container div:nth-child(5),
  .container div:nth-child(9),
  .container div:nth-child(12) {
    animation-delay: 0.1s;
  }

  .container div:nth-child(2),
  .container div:nth-child(6),
  .container div:nth-child(10),
  .container div:nth-child(13) {
    animation-delay: 0.2s;
  }

  .container div:nth-child(3),
  .container div:nth-child(7),
  .container div:nth-child(11),
  .container div:nth-child(14) {
    animation-delay: 0.3s;
  }

  .container div:nth-child(4) {
    animation-delay: 0.4s;
  }
</style>

<script>
  let container = document.querySelector(".container");
  let divs = document.querySelectorAll(".container div") as NodeListOf<HTMLElement>;
  let randomColor;
  // let isClicked = false;

  const colors = ["#ff993a", "#60e742", "#10e19f", "#1F93EE"];

  divs.forEach((div) => {
    div.addEventListener("mouseenter", () => {
      let bgColor = window.getComputedStyle(div).backgroundColor;
      if (is_transparent(bgColor)) {
        return;
      }
      randomColor = colors[Math.floor(Math.random() * colors.length)];
      console.log("aaa");
      div.style.background = randomColor;

      //listen for clicks on the new hover color
      // div.addEventListener("click", () => {
      //   isClicked = !isClicked;
      // });
    });

    div.addEventListener("mouseleave", () => {
      let bgColor = window.getComputedStyle(div).backgroundColor;
      if (is_transparent(bgColor)) {
        return;
      }
      div.style.background = "rgb(33, 33, 33)";
    });
  });

  // Ignore transparent hexagons to keep the pattern
  function is_transparent(color: string) {
    return color === "transparent" || color === "rgba(0, 0, 0, 0)" || color === "hsla(0, 0%, 0%, 0)";
  }
</script>
